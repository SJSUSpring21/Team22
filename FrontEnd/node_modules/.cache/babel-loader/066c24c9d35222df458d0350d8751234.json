{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Checkout\\\\Documents\\\\272\\\\Project\\\\latestPull\\\\Team22\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { addDays } from \"date-fns\";\nimport { GoogleCharts } from \"google-charts\";\nimport NavBar from \"./components/navBar\";\nimport Dashboard from \"./components/dashboard\";\nimport Login from \"./components/login\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  let arr = [];\n  const selectionRange = {\n    startDate: new Date(),\n    endDate: new Date(),\n    key: \"selection\"\n  };\n  const [state, setState] = useState([{\n    startDate: new Date(),\n    endDate: addDays(new Date(), 4),\n    key: \"selection\"\n  }]);\n  const [passwords] = useState([{\n    \"email\": \"admin@gmail.com\",\n    \"password\": \"admin\"\n  }, {\n    \"email\": \"vaibhav@gmail.com\",\n    \"password\": \"Vaibhav135\"\n  }, {\n    \"email\": \"kesiya@gmail.com\",\n    \"password\": \"kesiya\"\n  }, {\n    \"email\": \"sayali@gmail.com\",\n    \"password\": \"sayali\"\n  }, {\n    \"email\": \"lekha@gmail.com\",\n    \"password\": \"lekha\"\n  }]);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoggedIn, setLoggedIn] = useState(false);\n\n  const onChange = e => {\n    if (e.target.name === \"email\") {\n      setEmail(e.target.value);\n    } else {\n      setPassword(e.target.value);\n    }\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const userData = {\n      email,\n      password\n    };\n\n    for (var i = 0; i < passwords.length; i++) {\n      if (JSON.stringify(passwords[i]) === JSON.stringify(userData)) {\n        setLoggedIn(true);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: isLoggedIn ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        email: email,\n        isLoggedIn: isLoggedIn,\n        setLoggedIn: setLoggedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        email: email,\n        isLoggedIn: isLoggedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Login, {\n        email: email,\n        password: password,\n        onChange: onChange,\n        onSubmit: onSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n\n  function toggleButtonState() {\n    fetch(\"/getChartDetails\").then(res => res.json()).then(data => {\n      arr = data.data;\n      GoogleCharts.load(drawChart);\n    });\n    getOutletIdentifierFromTier(\"Tier 2\");\n  }\n\n  function getOutletIdentifierFromTier(tierValue) {\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        tier: tierValue\n      })\n    };\n    fetch(\"/getOutletNumberBasedOnTier\", requestOptions).then(res => res.json()).then(data => {\n      arr = data.data;\n      console.log(arr);\n    });\n  }\n\n  function drawChart() {\n    // Standard google charts functionality is available as GoogleCharts.api after load\n    //const data = GoogleCharts.api.visualization.arrayToDataTable(arr);\n    const pie_1_chart = new GoogleCharts.api.visualization.ColumnChart(document.getElementById(\"chart1\"));\n    var data = GoogleCharts.api.visualization.arrayToDataTable(arr);\n    var options = {\n      width: \"100%\",\n      height: 400,\n      legend: {\n        position: \"bottom\",\n        maxLines: 3\n      },\n      bar: {\n        groupWidth: \"75%\"\n      },\n      isStacked: true\n    };\n    pie_1_chart.draw(data, options);\n  }\n\n  function handleSelect(date) {\n    console.log(date); // native Date object\n  }\n}\n\n_s(App, \"fbmD9WLaYUOong71osKMA+OAb1A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Checkout/Documents/272/Project/latestPull/Team22/src/App.js"],"names":["React","useState","useEffect","addDays","GoogleCharts","NavBar","Dashboard","Login","App","arr","selectionRange","startDate","Date","endDate","key","state","setState","passwords","email","setEmail","password","setPassword","isLoggedIn","setLoggedIn","onChange","e","target","name","value","onSubmit","preventDefault","userData","i","length","JSON","stringify","toggleButtonState","fetch","then","res","json","data","load","drawChart","getOutletIdentifierFromTier","tierValue","requestOptions","method","headers","body","tier","console","log","pie_1_chart","api","visualization","ColumnChart","document","getElementById","arrayToDataTable","options","width","height","legend","position","maxLines","bar","groupWidth","isStacked","draw","handleSelect","date"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { addDays } from \"date-fns\";\r\nimport { GoogleCharts } from \"google-charts\";\r\nimport NavBar from \"./components/navBar\";\r\nimport Dashboard from \"./components/dashboard\";\r\nimport Login from \"./components/login\"\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  let arr = [];\r\n\r\n  const selectionRange = {\r\n    startDate: new Date(),\r\n    endDate: new Date(),\r\n    key: \"selection\",\r\n  };\r\n\r\n  const [state, setState] = useState([\r\n    {\r\n      startDate: new Date(),\r\n      endDate: addDays(new Date(), 4),\r\n      key: \"selection\",\r\n    },\r\n  ]);\r\n\r\n  const [passwords] = useState( [{\r\n    \"email\":\"admin@gmail.com\",\r\n    \"password\": \"admin\"\r\n  },{\r\n    \"email\":\"vaibhav@gmail.com\",\r\n    \"password\": \"Vaibhav135\"\r\n  },\r\n  {\r\n    \"email\":\"kesiya@gmail.com\",\r\n    \"password\": \"kesiya\"\r\n  },\r\n  {\r\n    \"email\":\"sayali@gmail.com\",\r\n    \"password\": \"sayali\"\r\n  },\r\n  {\r\n    \"email\":\"lekha@gmail.com\",\r\n    \"password\": \"lekha\"\r\n  }])\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isLoggedIn, setLoggedIn] = useState(false);\r\n\r\n  const onChange =(e) => {\r\n    if(e.target.name === \"email\"){\r\n      setEmail(e.target.value);\r\n    }else{\r\n      setPassword(e.target.value)\r\n    }\r\n  }\r\n\r\n  const onSubmit =(e) => {\r\n    e.preventDefault();\r\n\r\n    const userData = {\r\n      email,\r\n      password,\r\n    };\r\n    for (var i=0; i<passwords.length; i++) { \r\n        if (JSON.stringify(passwords[i]) === JSON.stringify(userData) ) {\r\n                setLoggedIn(true);\r\n         }\r\n   }\r\n}\r\n  return (\r\n    <div className=\"App\">\r\n       \r\n      {isLoggedIn\r\n       ? \r\n      <React.Fragment>\r\n        <NavBar email={email} isLoggedIn = {isLoggedIn}  setLoggedIn = {setLoggedIn}/> \r\n      <Dashboard /></React.Fragment>\r\n      :\r\n      <React.Fragment>\r\n        <NavBar email={email} isLoggedIn = {isLoggedIn} />\r\n        <Login email={email} password={password} onChange={onChange} onSubmit={onSubmit}/>\r\n      </React.Fragment> \r\n     }\r\n    </div>\r\n  );\r\n  function toggleButtonState() {\r\n    fetch(\"/getChartDetails\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        arr = data.data;\r\n        GoogleCharts.load(drawChart);\r\n      });\r\n    getOutletIdentifierFromTier(\"Tier 2\");\r\n  }\r\n  function getOutletIdentifierFromTier(tierValue) {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ tier: tierValue }),\r\n    };\r\n    fetch(\"/getOutletNumberBasedOnTier\", requestOptions)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        arr = data.data;\r\n        console.log(arr);\r\n      });\r\n  }\r\n\r\n  function drawChart() {\r\n    // Standard google charts functionality is available as GoogleCharts.api after load\r\n    //const data = GoogleCharts.api.visualization.arrayToDataTable(arr);\r\n    const pie_1_chart = new GoogleCharts.api.visualization.ColumnChart(\r\n      document.getElementById(\"chart1\")\r\n    );\r\n    var data = GoogleCharts.api.visualization.arrayToDataTable(arr);\r\n    var options = {\r\n      width: \"100%\",\r\n      height: 400,\r\n      legend: { position: \"bottom\", maxLines: 3 },\r\n      bar: { groupWidth: \"75%\" },\r\n      isStacked: true,\r\n    };\r\n    pie_1_chart.draw(data, options);\r\n  }\r\n  function handleSelect(date) {\r\n    console.log(date); // native Date object\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}