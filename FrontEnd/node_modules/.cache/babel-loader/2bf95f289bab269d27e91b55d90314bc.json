{"ast":null,"code":"/* googleCharts.js Version: 1.5.0 Built On: 2018-12-30 */\nconst loadScript = Symbol('loadScript');\nconst instance = Symbol('instance');\n\nlet _instance;\n\nclass GoogleChartsManager {\n  get [instance]() {\n    return _instance;\n  }\n\n  set [instance](value) {\n    _instance = value;\n  }\n\n  constructor() {\n    if (this[instance]) {\n      return this[instance];\n    }\n\n    this[instance] = this;\n  }\n\n  reset() {\n    _instance = null;\n  }\n\n  [loadScript]() {\n    if (!this.scriptPromise) {\n      this.scriptPromise = new Promise(resolve => {\n        const body = document.getElementsByTagName('body')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n\n        script.onload = function () {\n          GoogleCharts.api = window.google;\n          GoogleCharts.api.charts.load('current', {\n            packages: ['corechart', 'table']\n          });\n          GoogleCharts.api.charts.setOnLoadCallback(() => {\n            resolve();\n          });\n        };\n\n        script.src = 'https://www.gstatic.com/charts/loader.js';\n        body.appendChild(script);\n      });\n    }\n\n    return this.scriptPromise;\n  }\n\n  load(callback, type) {\n    return this[loadScript]().then(() => {\n      if (type) {\n        let config = {};\n\n        if (type instanceof Object) {\n          config = type;\n        } else if (Array.isArray(type)) {\n          config = {\n            packages: type\n          };\n        } else {\n          config = {\n            packages: [type]\n          };\n        }\n\n        this.api.charts.load('current', config);\n        this.api.charts.setOnLoadCallback(callback);\n      } else {\n        if (typeof callback != 'function') {\n          throw 'callback must be a function';\n        } else {\n          callback();\n        }\n      }\n    });\n  }\n\n}\n\nconst GoogleCharts = new GoogleChartsManager();\nexport default GoogleChartsManager;\nexport { GoogleCharts };","map":{"version":3,"sources":["C:/Users/Checkout/Documents/272/Project/latestPull/Team22/FrontEnd/node_modules/google-charts/dist/googleCharts.esm.js"],"names":["loadScript","Symbol","instance","_instance","GoogleChartsManager","value","constructor","reset","scriptPromise","Promise","resolve","body","document","getElementsByTagName","script","createElement","type","onload","GoogleCharts","api","window","google","charts","load","packages","setOnLoadCallback","src","appendChild","callback","then","config","Object","Array","isArray"],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAGC,MAAM,CAAC,YAAD,CAAzB;AACA,MAAMC,QAAQ,GAAGD,MAAM,CAAC,UAAD,CAAvB;;AACA,IAAIE,SAAJ;;AAEA,MAAMC,mBAAN,CAA0B;AACT,OAARF,QAAQ,IAAI;AACb,WAAOC,SAAP;AACH;;AAEY,OAARD,QAAQ,EAAEG,KAAF,EAAS;AAClBF,IAAAA,SAAS,GAAGE,KAAZ;AACH;;AAEDC,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKJ,QAAL,CAAJ,EAAoB;AAChB,aAAO,KAAKA,QAAL,CAAP;AACH;;AAED,SAAKA,QAAL,IAAiB,IAAjB;AACH;;AAEDK,EAAAA,KAAK,GAAG;AACJJ,IAAAA,SAAS,GAAG,IAAZ;AACH;;AAEU,GAAVH,UAAU,IAAI;AACX,QAAI,CAAC,KAAKQ,aAAV,EAAyB;AACrB,WAAKA,aAAL,GAAqB,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACxC,cAAMC,IAAI,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAAb;AACA,cAAMC,MAAM,GAAGF,QAAQ,CAACG,aAAT,CAAuB,QAAvB,CAAf;AACAD,QAAAA,MAAM,CAACE,IAAP,GAAc,iBAAd;;AACAF,QAAAA,MAAM,CAACG,MAAP,GAAgB,YAAW;AACvBC,UAAAA,YAAY,CAACC,GAAb,GAAmBC,MAAM,CAACC,MAA1B;AACAH,UAAAA,YAAY,CAACC,GAAb,CAAiBG,MAAjB,CAAwBC,IAAxB,CAA6B,SAA7B,EAAwC;AACpCC,YAAAA,QAAQ,EAAE,CAAC,WAAD,EAAc,OAAd;AAD0B,WAAxC;AAGAN,UAAAA,YAAY,CAACC,GAAb,CAAiBG,MAAjB,CAAwBG,iBAAxB,CAA0C,MAAM;AAC5Cf,YAAAA,OAAO;AACV,WAFD;AAGH,SARD;;AASAI,QAAAA,MAAM,CAACY,GAAP,GAAa,0CAAb;AACAf,QAAAA,IAAI,CAACgB,WAAL,CAAiBb,MAAjB;AACH,OAfoB,CAArB;AAgBH;;AACD,WAAO,KAAKN,aAAZ;AACH;;AAEDe,EAAAA,IAAI,CAACK,QAAD,EAAWZ,IAAX,EAAiB;AACjB,WAAO,KAAKhB,UAAL,IAAmB6B,IAAnB,CAAwB,MAAM;AACjC,UAAIb,IAAJ,EAAU;AACN,YAAIc,MAAM,GAAG,EAAb;;AACA,YAAId,IAAI,YAAYe,MAApB,EAA4B;AACxBD,UAAAA,MAAM,GAAGd,IAAT;AACH,SAFD,MAEO,IAAIgB,KAAK,CAACC,OAAN,CAAcjB,IAAd,CAAJ,EAAyB;AAC5Bc,UAAAA,MAAM,GAAG;AAAEN,YAAAA,QAAQ,EAAER;AAAZ,WAAT;AACH,SAFM,MAEA;AACHc,UAAAA,MAAM,GAAG;AAAEN,YAAAA,QAAQ,EAAE,CAACR,IAAD;AAAZ,WAAT;AACH;;AACD,aAAKG,GAAL,CAASG,MAAT,CAAgBC,IAAhB,CAAqB,SAArB,EAAgCO,MAAhC;AACA,aAAKX,GAAL,CAASG,MAAT,CAAgBG,iBAAhB,CAAkCG,QAAlC;AACH,OAXD,MAWO;AACH,YAAG,OAAOA,QAAP,IAAmB,UAAtB,EAAkC;AAC9B,gBAAM,6BAAN;AACH,SAFD,MAEO;AACHA,UAAAA,QAAQ;AACX;AACJ;AACJ,KAnBM,CAAP;AAoBH;;AAhEqB;;AAmE1B,MAAMV,YAAY,GAAG,IAAId,mBAAJ,EAArB;AAEA,eAAeA,mBAAf;AACA,SAASc,YAAT","sourcesContent":["/* googleCharts.js Version: 1.5.0 Built On: 2018-12-30 */\nconst loadScript = Symbol('loadScript');\nconst instance = Symbol('instance');\nlet _instance;\n\nclass GoogleChartsManager {\n    get [instance]() {\n        return _instance\n    }\n\n    set [instance](value) {\n        _instance = value;\n    }\n\n    constructor() {\n        if (this[instance]) {\n            return this[instance]\n        }\n\n        this[instance] = this;\n    }\n\n    reset() {\n        _instance = null;\n    }\n\n    [loadScript]() {\n        if (!this.scriptPromise) {\n            this.scriptPromise = new Promise(resolve => {\n                const body = document.getElementsByTagName('body')[0];\n                const script = document.createElement('script');\n                script.type = 'text/javascript';\n                script.onload = function() {\n                    GoogleCharts.api = window.google;\n                    GoogleCharts.api.charts.load('current', {\n                        packages: ['corechart', 'table'],\n                    });\n                    GoogleCharts.api.charts.setOnLoadCallback(() => {\n                        resolve();\n                    });\n                };\n                script.src = 'https://www.gstatic.com/charts/loader.js';\n                body.appendChild(script);\n            });\n        }\n        return this.scriptPromise\n    }\n\n    load(callback, type) {\n        return this[loadScript]().then(() => {\n            if (type) {\n                let config = {};\n                if (type instanceof Object) {\n                    config = type;\n                } else if (Array.isArray(type)) {\n                    config = { packages: type };\n                } else {\n                    config = { packages: [type] };\n                }\n                this.api.charts.load('current', config);\n                this.api.charts.setOnLoadCallback(callback);\n            } else {\n                if(typeof callback != 'function') {\n                    throw('callback must be a function');\n                } else {\n                    callback();               \n                }\n            }\n        })\n    }\n}\n\nconst GoogleCharts = new GoogleChartsManager();\n\nexport default GoogleChartsManager;\nexport { GoogleCharts };\n"]},"metadata":{},"sourceType":"module"}